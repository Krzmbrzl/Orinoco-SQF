/* The following code was generated by JFlex 1.7.0 */

package arma.orinocosqf;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/bumbi/IdeaProjects/Orinoco-SQF/code/jflex/orinocosqf.flex</tt>
 */
public class OrinocoJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO_CALL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\6\1\4\1\57\1\6\1\5\16\2\4\0\1\6\1\35"+
    "\1\16\1\3\1\1\1\42\1\40\1\17\1\45\1\46\1\21\1\43"+
    "\1\53\1\12\1\10\1\20\1\13\11\7\1\56\1\54\1\37\1\34"+
    "\1\36\1\55\1\0\4\15\1\11\1\15\21\1\1\14\2\1\1\51"+
    "\1\22\1\52\1\44\1\1\1\0\2\15\1\30\1\23\1\24\1\25"+
    "\2\1\1\26\2\1\1\31\1\1\1\27\4\1\1\33\1\1\1\32"+
    "\2\1\1\14\2\1\1\47\1\41\1\50\1\0\6\2\1\60\32\2"+
    "\2\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1"+
    "\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\21\0\160\2\5\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\123\1\1\0\213\1\1\0\5\2\2\0\246\1\1\0"+
    "\46\1\2\0\1\1\7\0\47\1\7\0\1\1\1\0\55\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\1\2\10\0\33\1\5\0"+
    "\3\1\15\0\6\2\5\0\1\1\4\0\13\2\1\0\1\2\3\0"+
    "\53\1\37\2\4\0\2\1\1\2\143\1\1\0\1\1\10\2\1\0"+
    "\6\2\2\1\2\2\1\0\4\2\2\1\12\2\3\1\2\0\1\1"+
    "\17\0\1\2\1\1\1\2\36\1\33\2\2\0\131\1\13\2\1\1"+
    "\16\0\12\2\41\1\11\2\2\1\4\0\1\1\5\0\26\1\4\2"+
    "\1\1\11\2\1\1\3\2\1\1\5\2\22\0\31\1\3\2\4\0"+
    "\13\1\65\0\25\1\1\0\10\1\26\0\60\2\66\1\3\2\1\1"+
    "\22\2\1\1\7\2\12\1\2\2\2\0\12\2\1\0\20\1\3\2"+
    "\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2"+
    "\1\1\10\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2"+
    "\4\1\7\0\2\1\4\0\3\2\1\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0"+
    "\4\1\1\0\1\1\7\0\14\2\3\1\1\2\13\0\3\2\1\0"+
    "\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\2\0\1\2\1\1\10\2\1\0\3\2\1\0\3\2\2\0"+
    "\1\1\17\0\2\1\2\2\2\0\12\2\1\0\1\1\7\0\1\1"+
    "\6\2\1\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\7\2\2\0"+
    "\2\2\2\0\3\2\10\0\2\2\4\0\2\1\1\0\3\1\2\2"+
    "\2\0\12\2\1\0\1\1\20\0\1\2\1\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\1\3\0\3\1\3\0\14\1\4\0\5\2\3\0\3\2\1\0"+
    "\4\2\2\0\1\1\6\0\1\2\16\0\12\2\11\0\1\1\6\0"+
    "\4\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1\3\0"+
    "\1\1\7\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0\3\1"+
    "\5\0\2\1\2\2\2\0\12\2\20\0\1\1\3\2\1\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\2\0\1\2"+
    "\1\1\7\2\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\1"+
    "\1\0\2\1\2\2\2\0\12\2\1\0\2\1\15\0\4\2\1\0"+
    "\10\1\1\0\3\1\1\0\51\1\2\2\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\1\1\5\0\3\1\1\2\7\0\3\1\2\2\2\0"+
    "\12\2\12\0\6\1\2\0\2\2\1\0\22\1\3\0\30\1\1\0"+
    "\11\1\1\0\1\1\2\0\7\1\3\0\1\2\4\0\6\2\1\0"+
    "\1\2\1\0\10\2\6\0\12\2\2\0\2\2\15\0\60\1\1\2"+
    "\2\1\7\2\4\0\10\1\10\2\1\0\12\2\47\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\2\2\1\6\2\1\0\2\2\1\1\2\0\5\1\1\0"+
    "\1\1\1\0\6\2\2\0\12\2\2\0\4\1\40\0\1\1\27\0"+
    "\2\2\6\0\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\10\1\1\0\44\1\4\0\24\2\1\0\2\2\5\1\13\2"+
    "\1\0\44\2\11\0\1\2\71\0\53\1\24\2\1\1\12\2\6\0"+
    "\6\1\4\2\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2"+
    "\15\1\14\2\1\1\17\2\2\0\46\1\1\0\1\1\5\0\1\1"+
    "\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1"+
    "\1\0\4\1\2\0\103\1\2\0\3\2\40\0\20\1\20\0\126\1"+
    "\2\0\6\1\3\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1"+
    "\3\0\13\1\7\0\15\1\1\0\4\1\3\2\13\0\22\1\3\2"+
    "\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0\2\2\14\0"+
    "\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0\12\2\41\0"+
    "\4\2\1\0\12\2\6\0\130\1\10\0\5\1\2\2\42\1\1\2"+
    "\1\1\5\0\106\1\12\0\37\1\1\0\14\2\4\0\14\2\12\0"+
    "\12\2\36\1\2\0\5\1\13\0\54\1\4\0\32\1\6\0\12\2"+
    "\46\0\27\1\5\2\4\0\65\1\12\2\1\0\35\2\2\0\13\2"+
    "\6\0\12\2\15\0\1\1\10\0\16\2\102\0\5\2\57\1\21\2"+
    "\7\1\4\0\12\2\21\0\11\2\14\0\3\2\36\1\15\2\2\1"+
    "\12\2\54\1\16\2\14\0\44\1\24\2\10\0\12\2\3\0\3\1"+
    "\12\2\44\1\2\0\11\1\107\0\3\2\1\0\25\2\4\1\1\2"+
    "\4\1\3\2\2\1\3\2\6\0\300\1\72\2\1\0\5\2\u0116\1"+
    "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
    "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\4\0\15\1\5\0\3\1\1\0\7\1\16\0\5\2\30\0\1\57"+
    "\1\57\5\2\20\0\2\1\23\0\1\1\13\0\5\2\1\0\12\2"+
    "\1\0\1\1\15\0\1\1\20\0\15\1\3\0\40\1\20\0\15\2"+
    "\4\0\1\2\3\0\14\2\21\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\21\0\51\1\u0a77\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1"+
    "\3\2\2\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1"+
    "\7\0\1\1\17\0\1\2\27\1\11\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\40\2\57\0\1\1\u01d5\0\3\1\31\0\11\1\6\2"+
    "\1\0\5\1\2\0\5\1\4\0\126\1\2\0\2\2\2\0\3\1"+
    "\1\0\132\1\1\0\4\1\5\0\52\1\2\0\136\1\21\0\33\1"+
    "\65\0\20\1\u0200\0\u19b6\1\112\0\u51eb\1\25\0\u048d\1\103\0\56\1"+
    "\2\0\u010d\1\3\0\20\1\12\2\2\1\24\0\57\1\1\2\4\0"+
    "\12\2\1\0\37\1\2\2\120\1\2\2\45\0\11\1\2\0\147\1"+
    "\2\0\44\1\1\0\10\1\77\0\13\1\1\2\3\1\1\2\4\1"+
    "\1\2\27\1\5\2\20\0\1\1\7\0\64\1\14\0\2\2\62\1"+
    "\22\2\12\0\12\2\6\0\22\2\6\1\3\0\1\1\1\0\1\1"+
    "\2\0\12\2\34\1\10\2\2\0\27\1\15\2\14\0\35\1\3\0"+
    "\4\2\57\1\16\2\16\0\1\1\12\2\6\0\5\1\1\2\12\1"+
    "\12\2\5\1\1\0\51\1\16\2\11\0\3\1\1\2\10\1\2\2"+
    "\2\0\12\2\6\0\27\1\3\0\1\1\3\2\62\1\1\2\1\1"+
    "\3\2\2\1\2\2\5\1\2\2\1\1\1\2\1\1\30\0\3\1"+
    "\2\0\13\1\5\2\2\0\3\1\2\2\12\0\6\1\2\0\6\1"+
    "\2\0\6\1\11\0\7\1\1\0\7\1\1\0\53\1\1\0\12\1"+
    "\12\0\163\1\10\2\1\0\2\2\2\0\12\2\6\0\u2ba4\1\14\0"+
    "\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0"+
    "\5\1\5\0\1\1\1\2\12\1\1\0\15\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0"+
    "\100\1\2\0\66\1\50\0\15\1\3\0\20\2\20\0\20\2\3\0"+
    "\2\1\30\0\3\1\31\0\1\1\6\0\5\1\1\0\207\1\2\0"+
    "\1\2\4\0\1\1\13\0\12\2\7\0\32\1\4\0\1\1\1\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\3\0\2\1\3\0\2\1\22\0\3\2\4\0\14\1\1\0"+
    "\32\1\1\0\23\1\1\0\2\1\1\0\17\1\2\0\16\1\42\0"+
    "\173\1\105\0\65\1\210\0\1\2\202\0\35\1\3\0\61\1\17\0"+
    "\1\2\37\0\40\1\15\0\36\1\5\0\46\1\5\2\5\0\36\1"+
    "\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1\2\0\12\2"+
    "\6\0\44\1\4\0\44\1\4\0\50\1\10\0\64\1\234\0\u0137\1"+
    "\11\0\26\1\12\0\10\1\230\0\6\1\2\0\1\1\1\0\54\1"+
    "\1\0\2\1\3\0\1\1\2\0\27\1\12\0\27\1\11\0\37\1"+
    "\101\0\23\1\1\0\2\1\12\0\26\1\12\0\32\1\106\0\70\1"+
    "\6\0\2\1\100\0\1\1\3\2\1\0\2\2\5\0\4\2\4\1"+
    "\1\0\3\1\1\0\33\1\4\0\3\2\4\0\1\2\40\0\35\1"+
    "\3\0\35\1\43\0\10\1\1\0\34\1\2\2\31\0\66\1\12\0"+
    "\26\1\12\0\23\1\15\0\22\1\156\0\111\1\67\0\63\1\15\0"+
    "\63\1\u030d\0\3\2\65\1\17\2\37\0\12\2\17\0\4\2\55\1"+
    "\13\2\2\0\1\2\22\0\31\1\7\0\12\2\6\0\3\2\44\1"+
    "\16\2\1\0\12\2\20\0\43\1\1\2\2\0\1\1\11\0\3\2"+
    "\60\1\16\2\4\1\5\0\3\2\3\0\12\2\1\1\1\0\1\1"+
    "\43\0\22\1\1\0\31\1\14\2\6\0\1\2\101\0\7\1\1\0"+
    "\1\1\1\0\4\1\1\0\17\1\1\0\12\1\7\0\57\1\14\2"+
    "\5\0\12\2\6\0\4\2\1\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\7\2"+
    "\2\0\2\2\2\0\3\2\2\0\1\1\6\0\1\2\5\0\5\1"+
    "\2\2\2\0\7\2\3\0\5\2\213\0\65\1\22\2\4\1\5\0"+
    "\12\2\46\0\60\1\24\2\2\1\1\0\1\1\10\0\12\2\246\0"+
    "\57\1\7\2\2\0\11\2\27\0\4\1\2\2\42\0\60\1\21\2"+
    "\3\0\1\1\13\0\12\2\46\0\53\1\15\2\10\0\12\2\66\0"+
    "\32\1\3\0\17\2\4\0\12\2\u0166\0\100\1\12\2\25\0\1\1"+
    "\u0100\0\1\1\12\2\50\1\7\2\1\1\4\2\10\0\1\2\10\0"+
    "\1\1\13\2\50\1\2\0\4\1\20\2\46\0\71\1\u0107\0\11\1"+
    "\1\0\45\1\10\2\1\0\10\2\1\1\17\0\12\2\30\0\36\1"+
    "\2\0\26\2\1\0\16\2\111\0\7\1\1\0\2\1\1\0\46\1"+
    "\6\2\3\0\1\2\1\0\2\2\1\0\7\2\1\1\1\2\10\0"+
    "\12\2\u02a6\0\u039a\1\146\0\157\1\21\0\304\1\u0abc\0\u042f\1\u0fd1\0"+
    "\u0247\1\u21b9\0\u0239\1\7\0\37\1\1\0\12\2\146\0\36\1\2\0"+
    "\5\2\13\0\60\1\7\2\11\0\4\1\14\0\12\2\11\0\25\1"+
    "\5\0\23\1\u0370\0\105\1\13\0\1\1\56\2\20\0\4\2\15\1"+
    "\100\0\2\1\36\0\u17ed\1\23\0\u02f3\1\u250d\0\u011f\1\121\0\u018c\1"+
    "\u0904\0\153\1\5\0\15\1\3\0\11\1\7\0\12\1\3\0\2\2"+
    "\1\0\4\2\u14c1\0\5\2\3\0\26\2\2\0\7\2\36\0\4\2"+
    "\224\0\3\2\u01bb\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1"+
    "\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1"+
    "\1\0\101\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1"+
    "\1\0\4\1\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1"+
    "\2\0\31\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\10\1\2\0\62\2\u0200\0\67\2\4\0\62\2\10\0\1\2"+
    "\16\0\1\2\26\0\5\2\1\0\17\2\u0550\0\7\2\1\0\21\2"+
    "\2\0\7\2\1\0\2\2\1\0\5\2\u07d5\0\305\1\13\0\7\2"+
    "\51\0\104\1\7\2\5\0\12\2\u04a6\0\4\1\1\0\33\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0"+
    "\21\1\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\2\0\u1682\1\16\0"+
    "\u1d31\1\u0c1f\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\5\2\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\2\1\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\7\0\2\32"+
    "\2\0\1\33\1\0\1\33\1\34\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\2\6\0\1\32"+
    "\2\44\10\0\1\44\1\45\2\0\1\46\4\0\1\44"+
    "\1\0\1\47\1\46\1\50\2\0\1\51\1\44\1\52"+
    "\1\47\1\46\1\50\1\53\1\0\1\51\1\44\1\52"+
    "\1\47\1\50\1\53\1\54\1\51\1\44\1\52\1\53"+
    "\1\54\1\44\1\54\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\61\0\u0157\0\u0188\0\u01b9\0\u01ea\0\61\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0126"+
    "\0\u0467\0\u0498\0\u04c9\0\u0188\0\u04fa\0\u01b9\0\u052b\0\u055c"+
    "\0\u058d\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u04c9\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\61\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\3\6\1\7\1\10\1\4"+
    "\1\11\1\12\2\4\1\13\1\14\1\15\1\16\1\3"+
    "\11\4\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\64\0\2\4\1\42\3\0"+
    "\1\4\1\0\1\4\1\0\3\4\5\0\11\4\24\0"+
    "\1\4\3\0\1\43\17\0\1\44\1\45\1\0\1\46"+
    "\3\0\1\47\32\0\3\6\61\0\1\7\1\50\1\51"+
    "\1\0\1\7\10\0\1\51\43\0\1\52\3\0\1\52"+
    "\54\0\1\7\1\50\1\51\1\0\1\7\1\53\7\0"+
    "\1\51\34\0\16\54\1\55\42\54\17\56\1\57\41\56"+
    "\20\0\1\60\1\61\73\0\1\62\60\0\1\63\60\0"+
    "\1\64\1\0\1\65\56\0\1\66\64\0\1\67\61\0"+
    "\1\70\22\0\1\71\56\0\1\4\7\0\1\4\2\0"+
    "\2\4\5\0\11\4\51\0\1\72\63\0\1\73\1\0"+
    "\1\74\54\0\1\75\1\0\1\76\60\0\1\77\40\0"+
    "\1\100\2\0\2\100\27\0\1\100\24\0\1\52\1\0"+
    "\1\51\1\0\1\52\10\0\1\51\43\0\1\101\1\0"+
    "\1\101\1\0\1\102\1\0\1\101\5\0\3\101\2\0"+
    "\1\101\46\0\1\54\61\0\1\56\41\0\4\60\2\0"+
    "\53\60\21\61\1\103\37\61\1\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\3\4\5\0\11\4\24\0\1\4"+
    "\25\0\1\104\56\0\1\105\70\0\1\106\50\0\1\107"+
    "\3\0\1\110\61\0\1\111\53\0\1\112\44\0\1\100"+
    "\3\0\1\100\54\0\1\113\1\0\1\113\1\0\1\113"+
    "\1\0\1\113\5\0\3\113\2\0\1\113\30\0\20\61"+
    "\1\114\1\103\37\61\26\0\1\115\60\0\1\116\56\0"+
    "\1\117\60\0\1\120\57\0\1\121\66\0\1\122\53\0"+
    "\1\123\43\0\1\124\1\0\1\124\1\0\1\124\1\0"+
    "\1\124\5\0\3\124\2\0\1\124\57\0\1\125\56\0"+
    "\1\126\33\0\4\117\2\0\14\117\1\127\36\117\25\0"+
    "\1\130\57\0\1\131\66\0\1\132\53\0\1\133\42\0"+
    "\1\134\1\0\1\134\1\0\1\134\1\0\1\134\5\0"+
    "\3\134\2\0\1\134\54\0\1\135\34\0\4\126\2\0"+
    "\14\126\1\136\36\126\5\117\1\137\14\117\1\127\36\117"+
    "\4\130\2\0\14\130\1\140\36\130\25\0\1\141\56\0"+
    "\1\142\35\0\4\133\2\0\14\133\1\143\36\133\7\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\5\0"+
    "\3\144\2\0\1\144\30\0\4\135\2\0\14\135\1\145"+
    "\36\135\5\126\1\146\14\126\1\136\36\126\5\117\1\0"+
    "\14\117\1\127\36\117\5\130\1\147\14\130\1\140\36\130"+
    "\4\141\2\0\14\141\1\150\36\141\24\0\1\151\34\0"+
    "\5\133\1\152\14\133\1\143\36\133\7\0\1\153\1\0"+
    "\1\153\1\0\1\153\1\0\1\153\5\0\3\153\2\0"+
    "\1\153\30\0\5\135\1\154\14\135\1\145\36\135\5\126"+
    "\1\0\14\126\1\136\36\126\5\130\1\0\14\130\1\140"+
    "\36\130\5\141\1\155\14\141\1\150\36\141\4\151\2\0"+
    "\14\151\1\156\36\151\5\133\1\0\14\133\1\143\36\133"+
    "\7\0\1\157\1\0\1\157\1\0\1\157\1\0\1\157"+
    "\5\0\3\157\2\0\1\157\30\0\5\135\1\0\14\135"+
    "\1\145\36\135\5\141\1\0\14\141\1\150\36\141\5\151"+
    "\1\160\14\151\1\156\36\151\7\0\1\161\1\0\1\161"+
    "\1\0\1\161\1\0\1\161\5\0\3\161\2\0\1\161"+
    "\30\0\5\151\1\0\14\151\1\156\36\151";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4116];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\5\1\1\11\4\1\1\11\6\1"+
    "\15\11\7\0\2\1\2\0\1\1\1\0\2\1\1\0"+
    "\7\11\1\1\6\0\3\1\10\0\1\1\1\11\2\0"+
    "\1\1\4\0\1\1\1\0\3\1\2\0\7\1\1\0"+
    "\16\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack<ZzFlexStreamInfo> zzStreams
    = new java.util.Stack<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer, 
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, int yychar, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
	private CommandSet commands;
  	private final YYTextCharSequence yytextCharSequence = new YYTextCharSequence();
	private int latestCommandId = -1;

	private int EQEQ_id;
	private int NE_id;
	private int GTGT_id;
	private int LE_id;
	private int GE_id;
	private int AMPAMP_id;
	private int BARBAR_id;
	private int ASTERISK_id;
	private int EQ_id;
	private int PERC_id;
	private int PLUS_id;
	private int MINUS_id;
	private int FSLASH_id;
	private int CARET_id;
	private int HASH_id;
	private int LT_id;
	private int GT_id;
	private int EXCL_id;
	private int LPAREN_id;
	private int RPAREN_id;
	private int L_CURLY_BRACE_id;
	private int R_CURLY_BRACE_id;
	private int L_SQ_BRACKET_id;
	private int R_SQ_BRACKET_id;
	private int COMMA_id;
	private int SEMICOLON_id;
	private int QUEST_id;
	private int COLON_id;


	public int getLatestCommandId() {
		return latestCommandId;
	}

  	public void setCommandSet(@NotNull CommandSet commands) {
		this.commands = commands;

		{
			EQEQ_id = commands.getId("==");
			NE_id = commands.getId("!=");
			GTGT_id = commands.getId(">>");
			LE_id = commands.getId("<=");
			GE_id = commands.getId(">=");
			AMPAMP_id = commands.getId("&&");
			BARBAR_id = commands.getId("||");
			ASTERISK_id = commands.getId("*");
			EQ_id = commands.getId("=");
			PERC_id = commands.getId("%");
			PLUS_id = commands.getId("+");
			MINUS_id = commands.getId("-");
			FSLASH_id = commands.getId("/");
			CARET_id = commands.getId("^");
			HASH_id = commands.getId("#");
			LT_id = commands.getId("<");
			GT_id = commands.getId(">");
			EXCL_id = commands.getId("!");
			LPAREN_id = commands.getId("(");
			RPAREN_id = commands.getId(")");
			L_CURLY_BRACE_id = commands.getId("{");
			R_CURLY_BRACE_id = commands.getId("}");
			L_SQ_BRACKET_id = commands.getId("[");
			R_SQ_BRACKET_id = commands.getId("]");
			COMMA_id = commands.getId(",");
			SEMICOLON_id = commands.getId(";");
			QUEST_id = commands.getId("?");
			COLON_id = commands.getId(":");
		}

	}

	private boolean yytextIsCommand() {
		latestCommandId = commands.getId(yytextCharSequence);
  		return latestCommandId >= 0;
	}

	private class YYTextCharSequence implements CharSequence{
		public int length() {
			return zzMarkedPos - zzStartRead;
		}
        public char charAt(int i) {
			return zzBuffer[zzStartRead + i];
        }

        public CharSequence subSequence(int startinc, int endex) {
			return new String(zzBuffer, zzStartRead + startinc, zzStartRead + endex);
        }
	}
	public enum TokenType {
		  WHITE_SPACE,
		  
          CMD_DEFINE,
          CMD_INCLUDE,
          CMD_IFDEF,
          CMD_IFNDEF,
          CMD_ELSE,
          CMD_ENDIF,
          CMD_UNDEF,

          BLOCK_COMMENT,
          INLINE_COMMENT,
          
          HEX_LITERAL,
          INTEGER_LITERAL,
          DEC_LITERAL,
          STRING_LITERAL,

          COMMAND(true),

          GLUED_WORD,
          WORD,
          EQEQ(true),
          NE(true),
          GTGT(true),
          LE(true),
          GE(true),
          AMPAMP(true),
          BARBAR(true),

          ASTERISK(true),
          EQ(true),
          PERC(true),
          PLUS(true),
          MINUS(true),
          FSLASH(true),
          CARET(true),

          HASH(true),

          LT(true),
          GT(true),

          EXCL(true),

          LPAREN(true),
          RPAREN(true),
          L_CURLY_BRACE(true),
          R_CURLY_BRACE(true),
          L_SQ_BRACKET(true),
          R_SQ_BRACKET(true),
          COMMA(true),
          SEMICOLON(true),
          
          QUEST(true),
          COLON(true),

          BAD_CHARACTER,
          EOF;

		  public final boolean isCommand;

		  TokenType() {
		  		isCommand = false;
		  }

		  TokenType(boolean isCommand) {
				this.isCommand = isCommand;
		  }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OrinocoJFlexLexer(java.io.Reader in) {
  	// constructor things in here
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3446) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {      
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }

  /**
   * Returns the buffer
   */
  public final char[] getBuffer() {
    return zzBuffer;
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (!yymoreStreams()) { return TokenType.EOF;}
		yypopStream();
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return TokenType.GLUED_WORD;
            } 
            // fall through
          case 46: break;
          case 3: 
            { latestCommandId = HASH_id; return TokenType.HASH;
            } 
            // fall through
          case 47: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 5: 
            { return TokenType.INTEGER_LITERAL;
            } 
            // fall through
          case 49: break;
          case 6: 
            { latestCommandId = MINUS_id; return TokenType.MINUS;
            } 
            // fall through
          case 50: break;
          case 7: 
            { latestCommandId = FSLASH_id; return TokenType.FSLASH;
            } 
            // fall through
          case 51: break;
          case 8: 
            { latestCommandId = ASTERISK_id; return TokenType.ASTERISK;
            } 
            // fall through
          case 52: break;
          case 9: 
            { latestCommandId = EQ_id; return TokenType.EQ;
            } 
            // fall through
          case 53: break;
          case 10: 
            { latestCommandId = EXCL_id; return TokenType.EXCL;
            } 
            // fall through
          case 54: break;
          case 11: 
            { latestCommandId = GT_id; return TokenType.GT;
            } 
            // fall through
          case 55: break;
          case 12: 
            { latestCommandId = LT_id; return TokenType.LT;
            } 
            // fall through
          case 56: break;
          case 13: 
            { latestCommandId = PERC_id; return TokenType.PERC;
            } 
            // fall through
          case 57: break;
          case 14: 
            { latestCommandId = PLUS_id; return TokenType.PLUS;
            } 
            // fall through
          case 58: break;
          case 15: 
            { latestCommandId = CARET_id; return TokenType.CARET;
            } 
            // fall through
          case 59: break;
          case 16: 
            { latestCommandId = LPAREN_id; return TokenType.LPAREN;
            } 
            // fall through
          case 60: break;
          case 17: 
            { latestCommandId = RPAREN_id; return TokenType.RPAREN;
            } 
            // fall through
          case 61: break;
          case 18: 
            { latestCommandId = L_CURLY_BRACE_id; return TokenType.L_CURLY_BRACE;
            } 
            // fall through
          case 62: break;
          case 19: 
            { latestCommandId = R_CURLY_BRACE_id; return TokenType.R_CURLY_BRACE;
            } 
            // fall through
          case 63: break;
          case 20: 
            { latestCommandId = L_SQ_BRACKET_id; return TokenType.L_SQ_BRACKET;
            } 
            // fall through
          case 64: break;
          case 21: 
            { latestCommandId = R_SQ_BRACKET_id; return TokenType.R_SQ_BRACKET;
            } 
            // fall through
          case 65: break;
          case 22: 
            { latestCommandId = COMMA_id; return TokenType.COMMA;
            } 
            // fall through
          case 66: break;
          case 23: 
            { latestCommandId = SEMICOLON_id; return TokenType.SEMICOLON;
            } 
            // fall through
          case 67: break;
          case 24: 
            { latestCommandId = QUEST_id; return TokenType.QUEST;
            } 
            // fall through
          case 68: break;
          case 25: 
            { latestCommandId = COLON_id; return TokenType.COLON;
            } 
            // fall through
          case 69: break;
          case 26: 
            { return TokenType.DEC_LITERAL;
            } 
            // fall through
          case 70: break;
          case 27: 
            { return TokenType.STRING_LITERAL;
            } 
            // fall through
          case 71: break;
          case 28: 
            { return TokenType.INLINE_COMMENT;
            } 
            // fall through
          case 72: break;
          case 29: 
            { latestCommandId = EQEQ_id; return TokenType.EQEQ;
            } 
            // fall through
          case 73: break;
          case 30: 
            { latestCommandId = NE_id; return TokenType.NE;
            } 
            // fall through
          case 74: break;
          case 31: 
            { latestCommandId = GE_id; return TokenType.GE;
            } 
            // fall through
          case 75: break;
          case 32: 
            { latestCommandId = GTGT_id; return TokenType.GTGT;
            } 
            // fall through
          case 76: break;
          case 33: 
            { latestCommandId = LE_id; return TokenType.LE;
            } 
            // fall through
          case 77: break;
          case 34: 
            { latestCommandId = AMPAMP_id; return TokenType.AMPAMP;
            } 
            // fall through
          case 78: break;
          case 35: 
            { latestCommandId = BARBAR_id; return TokenType.BARBAR;
            } 
            // fall through
          case 79: break;
          case 36: 
            { return TokenType.HEX_LITERAL;
            } 
            // fall through
          case 80: break;
          case 37: 
            { return TokenType.BLOCK_COMMENT;
            } 
            // fall through
          case 81: break;
          case 38: 
            { return TokenType.CMD_ELSE;
            } 
            // fall through
          case 82: break;
          case 39: 
            { return TokenType.CMD_ENDIF;
            } 
            // fall through
          case 83: break;
          case 40: 
            { return TokenType.CMD_IFDEF;
            } 
            // fall through
          case 84: break;
          case 41: 
            { return TokenType.CMD_UNDEF;
            } 
            // fall through
          case 85: break;
          case 42: 
            { return TokenType.CMD_DEFINE;
            } 
            // fall through
          case 86: break;
          case 43: 
            { return TokenType.CMD_IFNDEF;
            } 
            // fall through
          case 87: break;
          case 44: 
            { return TokenType.CMD_INCLUDE;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
